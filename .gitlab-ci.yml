# GitLab CI/CD Pipeline for Learn Node.js Microservice
# Updated with modern practices and comprehensive testing

variables:
  # Docker configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_BUILDKIT: 1

  # Kubernetes tools versions
  KUBECTL_VERSION: "v1.28.4"
  KIND_VERSION: "v0.20.0"
  HELM_VERSION: "v3.13.0"

  # Application configuration
  APP_NAME: "learn-python"
  DOCKER_REGISTRY: "ghcr.io"
  DOCKER_REPO: "dxas90"

  # Security scanning
  TRIVY_VERSION: "0.47.0"

# Use a modern base image with necessary tools
image: alpine/k8s:1.28.4

stages:
  - lint
  - test
  - security
  - build
  - deploy-staging
  - deploy-production
  - cleanup

# Global before_script for common setup
before_script:
  - apk add --no-cache curl wget git
  - echo "Starting CI/CD pipeline for commit $CI_COMMIT_SHA"

# Code quality and linting
lint:
  stage: lint
  image: python:3.12-slim
  before_script:
    - pip install -r requirements.txt -r requirements-dev.txt
  script:
    - flake8 app.py test_app.py --max-line-length=120
    - black --check app.py test_app.py
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

# Unit and integration tests
test:
  stage: test
  image: python:3.12-slim
  before_script:
    - apt-get update && apt-get install -y curl
    - pip install -r requirements.txt -r requirements-dev.txt
  script:
    - pytest test_app.py -v --cov=app --cov-report=term-missing --cov-report=xml --cov-report=html
    - python app.py &
    - APP_PID=$!
    - sleep 5
    - curl -f http://localhost:8000/healthz || exit 1
    - kill $APP_PID
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
      - coverage.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Security scanning
security-scan:
  stage: security
  image: aquasec/trivy:latest
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker build -t $APP_NAME:$CI_COMMIT_SHA .
  script:
    # Scan filesystem
    - trivy fs --exit-code 0 --format template --template "@contrib/gitlab.tpl" -o gl-dependency-scanning-report.json .
    # Scan Docker image
    - trivy image --exit-code 0 --format template --template "@contrib/gitlab.tpl" -o gl-container-scanning-report.json $APP_NAME:$CI_COMMIT_SHA
    # Fail on HIGH and CRITICAL vulnerabilities
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $APP_NAME:$CI_COMMIT_SHA
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
      container_scanning: gl-container-scanning-report.json
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Build and push Docker image
build:
  stage: build
  image: docker:24
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - export VERSION=${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
    - export BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
    - |
      docker build \
        --build-arg BUILD_DATE=$BUILD_DATE \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        --build-arg VERSION=$VERSION \
        --target production \
        -t $CI_REGISTRY_IMAGE:$VERSION \
        -t $CI_REGISTRY_IMAGE:latest \
        .
    - docker push $CI_REGISTRY_IMAGE:$VERSION
    - docker push $CI_REGISTRY_IMAGE:latest
  artifacts:
    reports:
      dotenv: build.env
  only:
    - main
    - tags

# Deploy to staging environment
deploy-staging:
  stage: deploy-staging
  image: alpine/k8s:1.28.4
  environment:
    name: staging
    url: https://staging.learn-node.example.com
  before_script:
    - |
      # Install kind for local Kubernetes testing
      curl -Lo ./kind https://kind.sigs.k8s.io/dl/$KIND_VERSION/kind-linux-amd64
      chmod +x ./kind
      mv ./kind /usr/local/bin/kind
    - kind create cluster --config=./.gitlab/kind-config.yaml --name staging
    - export KUBECONFIG="$(kind get kubeconfig-path --name staging)"
    - sed -i -E -e 's/localhost|0\.0\.0\.0/docker/g' "$KUBECONFIG"
  script:
    - echo "Deploying to staging environment..."
    - kubectl wait --for=condition=Ready nodes --all --timeout=300s
    - kubectl get nodes -o wide
    - |
      # Create namespace
      kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
      # Deploy application
      envsubst < k8s/deployment.yaml | kubectl apply -n staging -f -
      # Wait for deployment
      kubectl wait --for=condition=available --timeout=300s deployment/$APP_NAME -n staging
    - kubectl get pods -n staging -o wide
    - kubectl get services -n staging -o wide
  after_script:
    - kind delete cluster --name staging
  only:
    - main
  when: manual

# Deploy to production
deploy-production:
  stage: deploy-production
  image: alpine/k8s:1.28.4
  environment:
    name: production
    url: https://learn-node.example.com
  before_script:
    - echo "Setting up production deployment..."
  script:
    - echo "Deploying to production environment..."
    - echo "This would deploy to your actual Kubernetes cluster"
    # Add your production deployment scripts here
  only:
    - tags
  when: manual

# Cleanup job that always runs
cleanup:
  stage: cleanup
  image: alpine/k8s:1.28.4
  script:
    - echo "Cleaning up resources..."
    - docker system prune -f || true
    - kind delete cluster --name staging || true
  when: always
  allow_failure: true
