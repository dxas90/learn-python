1. Get the application URL by running these commands:
{{- if .Values.httproute.enabled }}
{{- range $hostname := .Values.httproute.hostnames }}
  http://{{ $hostname }}
{{- end }}

   NOTE: HTTPRoute is enabled. Make sure:
   - Gateway API CRDs are installed in your cluster
   - A Gateway controller is running (e.g., Istio, Envoy Gateway, NGINX Gateway)
   - The Gateway "{{ .Values.httproute.gatewayName }}" exists in namespace "{{ .Values.httproute.gatewayNamespace }}"

   To check the HTTPRoute status:
   kubectl get httproute --namespace {{ .Release.Namespace }} {{ include "base.fullname" . }}

{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "base.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch its status by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "base.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "base.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "base.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Application deployment status:
   kubectl get deployment --namespace {{ .Release.Namespace }} {{ include "base.fullname" . }}
   kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "base.name" . }},app.kubernetes.io/instance={{ .Release.Name }}"

{{- if .Values.persistence.enabled }}
3. Persistent storage:
   kubectl get pvc --namespace {{ .Release.Namespace }} {{ include "base.fullname" . }}
{{- end }}

{{- if .Values.autoscaling.enabled }}
4. Horizontal Pod Autoscaler:
   kubectl get hpa --namespace {{ .Release.Namespace }} {{ include "base.fullname" . }}
{{- end }}